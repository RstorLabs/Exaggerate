defmodule Exaggerate.Codesynth do

  @project_root Path.relative_to_cwd("../../../../") |> Path.expand

  def swaggerfile_exists?(""), do: false
  def swaggerfile_exists?(filename), do: @project_root |> Path.join(filename) |> File.exists?
  def swaggerfile_isvalid?(filename) do
    swaggerfile_exists?(filename) && (@project_root |> Path.join(filename)
      |> File.read!
      |> Poison.decode!
      |> Exaggerate.Validation.OpenAPI.is_valid?)
  end

  def build_routes(routelist, modulename) when is_map(routelist) do
    routelist |> Map.keys
      |> Enum.map(fn route ->
        routelist[route] |> Map.keys
          |> Enum.map(fn verb ->
            verb |> String.to_atom
                 |> Exaggerate.Codesynth.Routesynth.build_route(route, routelist[route][verb], modulename)
          end)
      end) |> List.flatten
           |> Enum.join("\n\n")
  end

  def build_endpoints(routelist, modulename) when is_map(routelist) do
    routelist |> Map.keys
      |> Enum.map(fn route ->
        routelist[route] |> Map.keys
          |> Enum.map(fn verb ->
            verb |> String.to_atom
                 |> Exaggerate.Codesynth.Endpointsynth.build_endpoint(route, routelist[route][verb], modulename)
          end)
      end) |> List.flatten
           |> Enum.join("\n\n")
  end

  def build_endpointmodule(swaggerfile, filename, modulename) do
    endpointcode = build_endpoints(swaggerfile["paths"], modulename)
    """
      defmodule #{modulename} do
        #{endpointcode}
      end
    """ |> Code.format_string! |> Enum.join
  end


  def build_routemodule(swaggerfile, filename, modulename) do
    routecode = build_routes(swaggerfile["paths"], modulename)
    optional_plugs = "" #for now.

    """
      #########################################################################
      #
      # --WARNING--
      #
      # this code is autogenerated.  Alterations to this code risk introducing
      # deviations to the supplied OpenAPI specification.  Please consider
      # modifying #{filename} instead of this file.
      #

      defmodule #{modulename}.Routes do
        use Plug.Routes
        use Exaggerate.RouteFunctions

        #{optional_plugs}

        plug :match
        plug :dispatch

        #{routecode}

        match _, do: send_resp(conn, 404, "{'error':'unknown route'}")

      end
    """ |> Code.format_string! |> Enum.join
  end

  def build_fromfile(swaggerfile) do
    #first, find the .json extension
    modulename = (if String.match?(swaggerfile, ~r/.json$/), do: String.slice(swaggerfile, 0..-6), else: swaggerfile)
      |> String.capitalize

    moduledir = Path.join([@project_root, "lib", String.downcase(modulename)])

    swaggerfile_content = @project_root
      |> Path.join(swaggerfile)
      |> File.read!
      |> Poison.decode!

    route_content = swaggerfile_content
      |> build_routemodule(swaggerfile, modulename)

    endpoint_content = swaggerfile_content
      |> build_endpointmodule(swaggerfile, modulename)

    File.mkdir!(moduledir)
    Path.join(moduledir, "routes.ex")
      |> File.write!(route_content)
    Path.join(moduledir, String.downcase(modulename) <> ".ex")
      |> File.write!(endpoint_content)
  end
end

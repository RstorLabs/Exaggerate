defmodule Exaggerate.Router do

  def module(module_name, filename, _swaggertree) do

    module = (module_name <> "_web")
    |> Macro.camelize
    |> Module.concat(Router)

    filename = "test.json"

    code = [quote do
    end]

    quote do
      @comment
      @comment "--WARNING--"
      @comment
      @comment "this code is autogenerated.  Alterations to this code risk introducing"
      @comment "deviations to the supplied OpenAPI specification.  Please consider"
      @comment "modifying #{unquote(filename)} instead of this file, followed by"
      @comment
      @comment "    mix swagger.update #{unquote(filename)}"
      @comment

      defmodule unquote(module) do
        unquote_splicing(code)
      end
    end
  end

  # OpenAPI 3.0 supports the following verbs for operations:
  # https://swagger.io/docs/specification/paths-and-operations/#operations

  @type http_verb :: :get | :post | :put | :patch |
                     :delete | :head | :options | :trace

  @spec route({String.t, http_verb}, any()) :: AST.ast
  def route({path, verb}, swaggertree) do
    contents = []
    |> build_summary(swaggertree["summary"])
    |> build_action(swaggertree)

    do_block = quote do
      unquote_splicing(contents)
    end

    {verb, [], [path, [do: do_block]]}
  end

  defp build_summary(list, nil), do: list
  defp build_summary(list, summary) do
    list ++ [quote do
      @comment unquote(summary)
    end]
  end

  defp build_action(list, omap =
      %{"requestBody" => rq_map,
        "operationId" => operation_id}) do
    if rq_map["content"] do
      mimetype_list = Map.keys(rq_map["content"])
      operation = String.to_atom(operation_id)

      list ++ [quote do
        with {:ok, content_type} <- Exaggerate.Process.requestbody_content(conn, unquote(mimetype_list)),
             {:ok, content} <- Validation.post_test(conn.body_params, content_type),
             {:ok, response} <- unquote(operation)(conn, content) do
          send_formatted(conn, 200, response)
        else
          {:error, ecode, response} ->
            send_formatted(conn, ecode, response)
        end
      end]
    else
      build_action(list, Map.delete(omap, "requestBody"))
    end
  end
  # parameters in_path
  defp build_action(list, omap =
    %{"parameters" => params, "operationId" => operation_id}) do
    with_guards = with_guards_for(params)
  end
  defp build_action(list, %{"operationId" => operation_id}) do
    list ++ [quote do
      unquote(String.to_atom(operation_id))(conn)
    end]
  end

  defp with_guards_for(params) do
  end

end
